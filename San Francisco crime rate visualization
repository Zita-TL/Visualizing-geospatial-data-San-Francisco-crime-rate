df_crime = pd.read_csv('https://cocl.us/sanfran_crime_dataset')
df_crime.head()

df_crime.rename(columns={'PdDistrict':'Neighborhood'}, inplace=True)
df_neighborhood = df_crime.groupby('Neighborhood', axis=0).count()

df_neighborhood.head()
df_neighborhood.rename(columns={'IncidntNum':'Count_crime'}, inplace=True)
df_neighborhood_crime_num = df_neighborhood[df_neighborhood.columns[0:1]]
df_neighborhood_crime_num.reset_index(inplace=True)
#df_neighborhood_crime_num.sort_values(['Count_crime'], ascending = False, axis = 0, inplace = True)
df_neighborhood_crime_num

import folium
# download countries geojson file
!wget --quiet https://cocl.us/sanfran_geojson -O world_countries.json

world_geo = r'world_countries.json' # geojson file

# create a plain world map
world_map = folium.Map(location=[37.7749, -122.4194], zoom_start=12) #, tiles='Mapbox Bright'
world_map




# create a numpy array of length 6 and has linear spacing from the minium total immigration to the maximum total immigration
threshold_scale = np.linspace(df_neighborhood_crime_num['Count_crime'].min(),
                              df_neighborhood_crime_num['Count_crime'].max(),   #df_neighborhood_crime_num['Count_crime'].min()
                              6, dtype=int)
threshold_scale = threshold_scale.tolist() # change the numpy array to a list
threshold_scale[-1] = threshold_scale[-1] + 1 # make sure that the last value of the list is greater than the maximum immigration
#print(type(threshold_scale))

world_map = folium.Map(location=[37.7749, -122.4194], zoom_start=12)  #37.7749, -122.4194
# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013
world_map.choropleth(
    geo_data=world_geo,
    data=df_neighborhood_crime_num,
    columns=['Neighborhood', 'Count_crime'],
    key_on='feature.properties.DISTRICT',  #feature.
    #threshold_scale=threshold_scale,
    fill_color='YlOrRd', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Crime rate in San Francisco',
    reset=True
)

# display map
world_map
